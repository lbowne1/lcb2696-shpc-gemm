#include <stdio.h>
#include <stdlib.h>
#include <immintrin.h>
#include <string.h>
#include <immintrin.h>
#include <math.h>



#define MR 4
#define NR 4
#define K 4

void microkernel( double *A, int rsA, int csA,
    double *B, int rsB, int csB,
    double *C, int rsC, int csC,
    int k ) 
    {
        for ( int p=0; p<k; p++ )
        {
            for ( int j=0; j<NR; j++) 
            {
                /* Declare vector registers to hold element j of C and hold it */
                __m256d gamma_0123_j = _mm256_loadu_pd( &C[0*rsC + j*csC] );

                /* Declare vector register for load/broadcasting beta( p,j ) */
                __m256d beta_p_j;
        
                /* Declare a vector register to hold the current column of A and load
                it with the four elements of that column. */
                __m256d alpha_0123_p = _mm256_loadu_pd( &A[ 0*rsA + p*csA ] );
        
                /* Load/broadcast beta( p,0 ). */
                beta_p_j = _mm256_broadcast_sd( &B[ p*rsB + j*csB ] );
        
                /* update the first column of C with the current column of A times
                beta ( p,0 ) */
                gamma_0123_j = _mm256_fmadd_pd( alpha_0123_p, beta_p_j, gamma_0123_j );

                /* Store the updated results */
                _mm256_storeu_pd( &C[0*rsC + j*csC], gamma_0123_j );

            }
        } 
    }



void naive_matmul(double *A, int rsA, int csA,
                  double *B, int rsB, int csB,
                  double *C, int rsC, int csC,
                  int k) {
    for (int p = 0; p < k; p++) {
        for (int i = 0; i < MR; i++) {
            for (int j = 0; j < NR; j++) {
                C[i * rsC + j * csC] += A[i * rsA + p * csA] * B[p * rsB + j * csB];
            }
        }
    }
}

void print_matrix(const char *name, double *M, int rows, int cols, int rs, int cs) {
    printf("%s:\n", name);
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%8.2f ", M[i * rs + j * cs]);
        }
        printf("\n");
    }
    printf("\n");
}

int main() {
    double A[MR * K] = {
        3, 6, 7, 5, 
        3, 5, 6, 2,
        9, 1, 2, 7, 
        0, 9, 3, 6, 
    };

    double B[K * NR] = {
        0, 6, 2, 6,
        1, 8, 7, 9,
        2, 0, 2, 3,
        7, 5, 9, 2,
    };

    double C[MR * NR] = {0};  // Result matrix for microkernel
    double C_ref[MR * NR] = {0}; // Reference result for validation

    print_matrix("A", A, MR, K, 1, K);
    print_matrix("B", B, K, NR, 1, NR);

    // Compute using microkernel
    microkernel(A, 1, K, B, 1, NR, C, 1, NR, K);

    // Compute using naive approach
    naive_matmul(A, 1, K, B, 1, NR, C_ref, 1, NR, K);

    // Print results
    print_matrix("C (Microkernel)", C, MR, NR, 1, NR);
    print_matrix("C (Reference)", C_ref, MR, NR, 1, NR);

    // Compare results
    double max_diff = 0.0;
    for (int i = 0; i < MR * NR; i++) {
        double diff = fabs(C[i] - C_ref[i]);
        if (diff > max_diff) {
            max_diff = diff;
        }
    }

    if (max_diff < 1e-6) {
        printf("✅ Microkernel result is correct! Max difference: %e\n", max_diff);
    } else {
        printf("❌ Microkernel result is incorrect! Max difference: %e\n", max_diff);
    }

    return 0;
}
